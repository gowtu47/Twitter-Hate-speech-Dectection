from qz.people import QzPerson
from qz.people.internal.generated_shortcuts import (
    email2Band,
    email2CostCenterCode,
    email2DirectReports,
    email2FloorNumber,
    email2Lob,
    email2ManagerChain,
    email2MailCode,
    email2Address,
    FailureBehavior
)
import logging

# Logging setup
logging.basicConfig(level=logging.INFO)

# NBK login IDs
nbk_login_ids = [
    "zukwka0z",
    "nbkcrso",
    "abc12345",
    "xyz67890",
    "testnbk1",
    "userone1",
    "usertwo2",
    "nbkid03x",
    "nbktest4",
    "finalnbk5"
]

all_people = []

for login_id in nbk_login_ids:
    try:
        person = QzPerson.fromLoginId(login_id)
        if not person:
            logging.warning(f"No user found: {login_id}")
            continue

        email = person.EmailAddress() if person.EmailAddress else None

        # Defaults
        band = cost_center = floor = lob = mail_code = address = None
        direct_reports = []
        manager_chain = []

        if email:
            try:
                band = email2Band(email, failureBehavior=FailureBehavior.none)
                cost_center = email2CostCenterCode(email, failureBehavior=FailureBehavior.none)
                floor = email2FloorNumber(email, failureBehavior=FailureBehavior.none)
                lob = email2Lob(email, failureBehavior=FailureBehavior.none)
                mail_code = email2MailCode(email, failureBehavior=FailureBehavior.none)
                address = email2Address(email, failureBehavior=FailureBehavior.none)
                direct_reports = email2DirectReports(email, failureBehavior=FailureBehavior.none)

                # Manager chain with names
                managers = email2ManagerChain(email, failureBehavior=FailureBehavior.none)
                for mgr in managers:
                    if mgr:
                        mgr_id = mgr.LoginId()
                        mgr_name = mgr.FullName() if mgr.FullName else f"{mgr.FirstName()} {mgr.LastName()}"
                        manager_chain.append(f"{mgr_id} [{mgr_name}]")
            except Exception as e:
                logging.warning(f"Lookup failed for {email}: {e}")

        person_data = {
            "Login ID": login_id,
            "Full Name": person.FullName() if person.FullName else f"{person.FirstName()} {person.LastName()}",
            "Username": person.UserName() if person.UserName else None,
            "Email": email,
            "Band": band,
            "LOB": lob,
            "MailCode": mail_code,
            "Floor": floor,
            "Address": address[0] if address else None,
            "Cost Center": cost_center,
            "Direct Report Count": len(direct_reports) if direct_reports else 0,
            "Manager Chain": manager_chain,
            "Employment Status": person.EmploymentStatusCode(),
            "Display Name": person.DisplayName(),
            "Hire Date": person.HireDate().strftime("%Y-%m-%d") if person.HireDate() else None,
            "Person Number": person.PersonNumber()
        }

        all_people.append(person_data)

        # Horizontal Manager Chain View
        flow = f"{login_id} -> " + " -> ".join(manager_chain) if manager_chain else f"{login_id} -> No manager found"
        print(flow)

    except Exception as e:
        logging.error(f"Failed to process {login_id}: {e}")